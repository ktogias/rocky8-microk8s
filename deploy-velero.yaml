---
- name: Ensure Helm is installed
  tags: 
    - prepare
  import_playbook: install-helm3.yaml

- name: Chek if CLI is already installed
  tags:
  - check
  hosts: initkubmaster
  become: true
  tasks:
  - name: Try to get velero version
    become_user: "{{ kubectl_user }}"
    command: /usr/local/bin/velero version
    register: velero_version_result
    ignore_errors: yes
  - name: Show velero version result
    debug:
      var: velero_version_result
  - name: Set VELERO_IS_INSTALLED fact
    set_fact: 
      VELERO_IS_INSTALLED: "{{not velero_version_result.failed}}"

- name: Ensure CLI binary is installed
  tags:
    - install_cli
  hosts: initkubmaster
  become: true
  tasks:
  - name: Is velero already installed?
    debug:
      msg: "{{VELERO_IS_INSTALLED | default(false)}}"
  - name: Download CLI binary
    unarchive:
      src: https://github.com/vmware-tanzu/velero/releases/download/{{velero.cli.version | default("v1.7.0")}}/velero-{{velero.cli.version | default("v1.7.0")}}-linux-{{velero.cli.arch | default("amd64")}}.tar.gz
      dest: /tmp/
      remote_src: yes
    when: VELERO_IS_INSTALLED | default(false)| bool is false
  - name: Install CLI binary
    copy:
      src: /tmp/velero-{{velero.cli.version | default("v1.5.3")}}-linux-{{velero.cli.arch | default("amd64")}}/velero
      dest: /usr/local/bin/velero
      mode: '755'
      remote_src: yes
    when: VELERO_IS_INSTALLED | default(false)| bool is false
  - name: Try to get velero version
    become_user: "{{ kubectl_user }}"
    command: /usr/local/bin/velero version
    register: velero_version_result
    when: VELERO_IS_INSTALLED | default(false)| bool is false
  - name: Show velero version result
    debug:
      var: velero_version_result
    when: VELERO_IS_INSTALLED | default(false)| bool is false

- name: Setup helm repo 
  tags: 
    - prepare
  hosts: initkubmaster
  become: true
  gather_facts: False
  tasks:
  - name: Ensure vmware-tanzu helm repo is added 
    become_user: "{{ kubectl_user }}"
    command: /usr/local/bin/helm repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts
    register: repo_add_result
  - name: Show repo add resul
    debug:
      var: repo_add_result

- name: Install chart
  tags: 
    - install_chart
  hosts: initkubmaster
  become: true
  gather_facts: False
  tasks:
  - name: Ensure vmware-tanzu helm repo is up to date
    become_user: "{{ kubectl_user }}"
    command: /usr/local/bin/helm repo update
    register: repo_update_result
  - name: Show repo update result
    debug:
      var: repo_update_result
  - name: Template values.yaml
    template:
      src: ../helm-values/velero/values.tmpl.yaml
      dest: "/tmp/velero-helm-values.yaml"
  - name: Ensure chart is installed
    become_user: "{{ kubectl_user }}"
    command: /usr/local/bin/helm upgrade -i -f /tmp/velero-helm-values.yaml velero vmware-tanzu/velero --namespace {{velero.namespace | default('velero')}} --create-namespace
    register: helm_install_result
  - name: Show helm install result
    debug:
      var: helm_install_result
  - name: Register existence of restic repositories
    become_user: "{{ kubectl_user }}"
    command: kubectl -n velero get resticrepositories.velero.io -o name
    register: get_resticrepositories_result
  - name: Show Register existence of restic repositories result
    debug:
      var: get_resticrepositories_result.stdout_lines
  - name: Set Restic RepositoryPassword
    become_user: "{{ kubectl_user }}"
    shell: "kubectl -n {{velero.namespace | default('velero')}} create secret generic velero-restic-credentials --from-literal=repository-password={{velero.restic.repositoryPassword}} --dry-run -o yaml | kubectl apply -f - "
    when: velero.restic.repositoryPassword is defined and get_resticrepositories_result.stdout_lines | length == 0

